// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.18.0
// source: message.sql

package db

import (
	"context"
	"database/sql"
)

const createMessage = `-- name: CreateMessage :one
INSERT INTO "Message" (chat_id, question, answer) VALUES ($1, $2, $3) RETURNING chat_id, no, question, answer
`

type CreateMessageParams struct {
	ChatID   sql.NullInt32 `json:"chat_id"`
	Question string        `json:"question"`
	Answer   string        `json:"answer"`
}

func (q *Queries) CreateMessage(ctx context.Context, arg CreateMessageParams) (Message, error) {
	row := q.db.QueryRowContext(ctx, createMessage, arg.ChatID, arg.Question, arg.Answer)
	var i Message
	err := row.Scan(
		&i.ChatID,
		&i.No,
		&i.Question,
		&i.Answer,
	)
	return i, err
}

const getChatMessages = `-- name: GetChatMessages :many
SELECT chat_id, no, question, answer FROM "Message" WHERE chat_id = $1 ORDER BY "no" DESC
`

func (q *Queries) GetChatMessages(ctx context.Context, chatID sql.NullInt32) ([]Message, error) {
	rows, err := q.db.QueryContext(ctx, getChatMessages, chatID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Message
	for rows.Next() {
		var i Message
		if err := rows.Scan(
			&i.ChatID,
			&i.No,
			&i.Question,
			&i.Answer,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getLimitedChatMessages = `-- name: GetLimitedChatMessages :many
SELECT chat_id, no, question, answer FROM "Message" WHERE chat_id = $1 ORDER BY "no" DESC LIMIT $2
`

type GetLimitedChatMessagesParams struct {
	ChatID sql.NullInt32 `json:"chat_id"`
	Limit  int32         `json:"limit"`
}

func (q *Queries) GetLimitedChatMessages(ctx context.Context, arg GetLimitedChatMessagesParams) ([]Message, error) {
	rows, err := q.db.QueryContext(ctx, getLimitedChatMessages, arg.ChatID, arg.Limit)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Message
	for rows.Next() {
		var i Message
		if err := rows.Scan(
			&i.ChatID,
			&i.No,
			&i.Question,
			&i.Answer,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
