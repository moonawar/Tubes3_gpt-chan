// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.18.0
// source: chat.sql

package db

import (
	"context"
)

const createChat = `-- name: CreateChat :one
INSERT INTO "Chat" (username) VALUES ($1) RETURNING chat_id, username
`

func (q *Queries) CreateChat(ctx context.Context, username string) (Chat, error) {
	row := q.db.QueryRowContext(ctx, createChat, username)
	var i Chat
	err := row.Scan(&i.ChatID, &i.Username)
	return i, err
}

const getUserChat = `-- name: GetUserChat :many
SELECT chat_id, username FROM "Chat" WHERE username = $1
`

func (q *Queries) GetUserChat(ctx context.Context, username string) ([]Chat, error) {
	rows, err := q.db.QueryContext(ctx, getUserChat, username)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Chat
	for rows.Next() {
		var i Chat
		if err := rows.Scan(&i.ChatID, &i.Username); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
