// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.18.0
// source: qa.sql

package db

import (
	"context"
)

const createQA = `-- name: CreateQA :one
INSERT INTO "QA" (question, answer) VALUES ($1, $2) RETURNING qa_id, question, answer
`

type CreateQAParams struct {
	Question string `json:"question"`
	Answer   string `json:"answer"`
}

func (q *Queries) CreateQA(ctx context.Context, arg CreateQAParams) (QA, error) {
	row := q.db.QueryRowContext(ctx, createQA, arg.Question, arg.Answer)
	var i QA
	err := row.Scan(&i.QaID, &i.Question, &i.Answer)
	return i, err
}

const getAllQA = `-- name: GetAllQA :many
SELECT qa_id, question, answer FROM "QA"
`

func (q *Queries) GetAllQA(ctx context.Context) ([]QA, error) {
	rows, err := q.db.QueryContext(ctx, getAllQA)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []QA
	for rows.Next() {
		var i QA
		if err := rows.Scan(&i.QaID, &i.Question, &i.Answer); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getQAById = `-- name: GetQAById :one
SELECT qa_id, question, answer FROM "QA" WHERE qa_id = $1
`

func (q *Queries) GetQAById(ctx context.Context, qaID int32) (QA, error) {
	row := q.db.QueryRowContext(ctx, getQAById, qaID)
	var i QA
	err := row.Scan(&i.QaID, &i.Question, &i.Answer)
	return i, err
}

const removeQA = `-- name: RemoveQA :one
DELETE FROM "QA" WHERE qa_id = $1 RETURNING qa_id, question, answer
`

func (q *Queries) RemoveQA(ctx context.Context, qaID int32) (QA, error) {
	row := q.db.QueryRowContext(ctx, removeQA, qaID)
	var i QA
	err := row.Scan(&i.QaID, &i.Question, &i.Answer)
	return i, err
}

const updateQA = `-- name: UpdateQA :one
UPDATE "QA" SET question = $2, answer = $3 WHERE qa_id = $1 RETURNING qa_id, question, answer
`

type UpdateQAParams struct {
	QaID     int32  `json:"qa_id"`
	Question string `json:"question"`
	Answer   string `json:"answer"`
}

func (q *Queries) UpdateQA(ctx context.Context, arg UpdateQAParams) (QA, error) {
	row := q.db.QueryRowContext(ctx, updateQA, arg.QaID, arg.Question, arg.Answer)
	var i QA
	err := row.Scan(&i.QaID, &i.Question, &i.Answer)
	return i, err
}
